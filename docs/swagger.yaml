basePath: /
definitions:
  model.Area:
    properties:
      expl-rating:
        type: number
      expl-tests:
        type: integer
      failures:
        type: integer
      first-total:
        type: integer
      id:
        type: integer
      name:
        type: string
      passes:
        type: integer
      pending:
        type: integer
      product-id:
        type: integer
      skipped:
        type: integer
      total:
        type: integer
    type: object
  model.Credentials:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  model.ExplTest:
    properties:
      area-id:
        type: integer
      id:
        type: integer
      rating:
        type: integer
      summary:
        type: string
      test-run:
        type: string
    type: object
  model.Feature:
    properties:
      area-id:
        type: integer
      business-value:
        type: string
      documentation:
        type: string
      failures:
        type: integer
      first-total:
        type: integer
      id:
        type: integer
      name:
        type: string
      passes:
        type: integer
      pending:
        type: integer
      skipped:
        type: integer
      tests:
        items:
          $ref: '#/definitions/model.Test'
        type: array
      total:
        type: integer
      url:
        type: string
    type: object
  model.NewPassword:
    properties:
      new-password:
        type: string
      password:
        type: string
    type: object
  model.Product:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  model.Test:
    properties:
      area-id:
        type: integer
      failed-test-runs:
        type: integer
      failures:
        type: integer
      feature-id:
        type: integer
      file-name:
        type: string
      first-total:
        type: integer
      id:
        type: integer
      passes:
        type: integer
      pending:
        type: integer
      product-id:
        type: integer
      skipped:
        type: integer
      suite:
        type: string
      test-run:
        type: string
      total:
        type: integer
      total-test-runs:
        type: integer
      url:
        type: string
      uuid:
        type: string
    type: object
  model.User:
    properties:
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      roles:
        items:
          type: string
        type: array
    type: object
host: localhost:8080
info:
  contact: {}
  description: API for e2e-coverage
  title: e2ecoverage
  version: "1.0"
paths:
  /api/v1/areas:
    post:
      description: Takes an area JSON and stores it in DB. Return saved JSON.
      parameters:
      - description: Area JSON
        in: body
        name: area
        required: true
        schema:
          $ref: '#/definitions/model.Area'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Area'
      summary: Add a new area to a product
      tags:
      - area
    put:
      description: Takes an area JSON and the Area ID and updates an area in the DB.
      parameters:
      - description: Area ID
        in: path
        name: id
        required: true
        type: integer
      - description: Area JSON
        in: body
        name: area
        required: true
        schema:
          $ref: '#/definitions/model.Area'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Area'
      summary: Updates an area
      tags:
      - area
  /api/v1/areas/{id}:
    delete:
      description: Deletes the product area
      parameters:
      - description: Area ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Deletes the product area
      tags:
      - area
  /api/v1/areas/{id}/features:
    get:
      description: Get all features for the specified area
      parameters:
      - description: Area ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Feature'
            type: array
      summary: Get all area features
      tags:
      - feature
  /api/v1/auth/login:
    post:
      description: Log in and returning a JWT token and a refresh token if user name
        and password are correct
      parameters:
      - description: Credentials JSON
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/model.Credentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Log in of a user
      tags:
      - user
  /api/v1/coverage/{id}/areas:
    get:
      description: Get coverage for all product areas. Only tests from the last 28
        days are considered.
      parameters:
      - description: Product ID
        in: path
        name: product
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Area'
            type: array
      summary: Get coverage for all product areas.
      tags:
      - coverage
  /api/v1/coverage/areas/{id}/features:
    get:
      description: Get coverage for all area features. Only tests from the last 28
        days are considered.
      parameters:
      - description: Area ID
        in: path
        name: product
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Feature'
            type: array
      summary: Get coverage for all area features.
      tags:
      - coverage
  /api/v1/expl-tests:
    post:
      description: Takes a exploratory test JSON and stores it in DB. Return saved
        JSON.
      parameters:
      - description: Expl Test JSON
        in: body
        name: expl-test
        required: true
        schema:
          $ref: '#/definitions/model.ExplTest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.ExplTest'
      summary: Add a new expl test
      tags:
      - expl-test
  /api/v1/expl-tests/{id}:
    delete:
      description: Deletes the expl test
      parameters:
      - description: Test ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Deletes the expl test
      tags:
      - expl-test
  /api/v1/expl-tests/area/{areaid}:
    post:
      description: Get all exploratory tests for the specified area for the last 28
        days
      parameters:
      - description: Area ID
        in: path
        name: areaid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.ExplTest'
            type: array
      summary: Get all exploratory tests.
      tags:
      - expl-test
  /api/v1/features:
    post:
      description: Takes a feature JSON and stores it in DB. Return saved JSON.
      parameters:
      - description: Feature JSON
        in: body
        name: feature
        required: true
        schema:
          $ref: '#/definitions/model.Feature'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Feature'
      summary: Add a new feature to an area
      tags:
      - feature
    put:
      description: Takes a feature JSON and feature ID and updates it in DB. Return
        saved JSON.
      parameters:
      - description: Feature ID
        in: path
        name: id
        required: true
        type: integer
      - description: Feature JSON
        in: body
        name: feature
        required: true
        schema:
          $ref: '#/definitions/model.Feature'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Feature'
      summary: Updates a feature
      tags:
      - feature
  /api/v1/features/{id}:
    delete:
      description: Deletes the product feature
      parameters:
      - description: Feature ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Deletes the product feature
      tags:
      - feature
  /api/v1/products:
    get:
      description: Get all products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Product'
            type: array
      summary: Get all products
      tags:
      - product
    post:
      description: Takes a product JSON and stores it in DB. Return saved JSON.
      parameters:
      - description: Product JSON
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/model.Product'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Product'
      summary: Add a new product
      tags:
      - product
  /api/v1/products/{id}:
    delete:
      description: Deletes the product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Deletes the product
      tags:
      - product
    put:
      description: Takes a product JSON and product ID and updates it in DB. Return
        saved JSON.
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product JSON
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/model.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Product'
      summary: Updates a product
      tags:
      - product
  /api/v1/products/{id}/areas:
    get:
      description: Get all areas for the specified product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Area'
            type: array
      summary: Get all product areas
      tags:
      - area
  /api/v1/tests:
    get:
      description: Get all tests for the specified suite and filename.
      parameters:
      - description: Suite name
        in: query
        name: suite
        required: true
        type: string
      - description: File name
        in: query
        name: file-name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Test'
            type: array
      summary: Get all tests for the specified suite and filename.
      tags:
      - test
    post:
      description: Takes a test JSON and stores it in DB. Return saved JSON.
      parameters:
      - description: Test JSON
        in: body
        name: test
        required: true
        schema:
          $ref: '#/definitions/model.Test'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Test'
      summary: Add a new test
      tags:
      - test
  /api/v1/tests/{id}:
    delete:
      description: Deletes the test
      parameters:
      - description: Test ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Deletes the test
      tags:
      - test
  /api/v1/users:
    get:
      description: Gets all user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
      summary: Gets all user
      tags:
      - user
    post:
      description: Takes a user JSON and stores it in DB. Return saved JSON.
      parameters:
      - description: User JSON
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.User'
      summary: Add a new user
      tags:
      - user
  /api/v1/users/{id}:
    delete:
      description: Deletes the user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Deletes the user
      tags:
      - user
    put:
      description: Takes a user JSON and updates the user.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User JSON
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Changes the role of a user
      tags:
      - user
  /api/v1/users/change-pwd/{id}:
    put:
      description: Takes the NewPassword JSON and updates the password. Only possible
        for the current user to change his own password.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: NewPassword JSON
        in: body
        name: newPassword
        required: true
        schema:
          $ref: '#/definitions/model.NewPassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Password Change
      tags:
      - user
  /coverage/:id/upload-mocha-summary-report:
    post:
      description: Adds test result of a mocha summary report.
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Mocha JSON
        in: body
        name: test
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
      summary: Adds test result of a mocha summary report
      tags:
      - mocha
  /coverage/features/:id/tests:
    get:
      description: Get coverage for all tests of a feature for the last 28 days.
      parameters:
      - description: Feature ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Test'
            type: array
      summary: Get coverage for all tests of a feature.
      tags:
      - coverage
  /coverage/products/:id/tests:
    get:
      description: Get coverage for all tests of a product for the last 28 days.
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Test'
            type: array
      summary: Get coverage for all tests of a product.
      tags:
      - coverage
schemes:
- http
swagger: "2.0"
